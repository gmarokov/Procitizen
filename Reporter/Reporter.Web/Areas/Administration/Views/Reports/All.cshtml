@using Reporter.Web.Areas.Administration.ViewModels.Reports
@using X.PagedList;
@using X.PagedList.Mvc;
@using System;

@using System.Collections;



@model X.PagedList.PagedList<AdminListReportViewModel>

@{
    ViewBag.Title = "All reports";
}

<div class="ui container">
    <h2>Manage Reports</h2>
    
    <div class="ui secondary menu">
        <div class="extra content">
            <div class="ui animated button" tabindex="0">
                <div class="visible content">Back</div>
                <div class="hidden content">
                    <a href="@Url.Action("Index", "Home", new { area = "Administration"} )"><i class="chevron left icon"></i></a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="ui message hide">
        <i class="close icon"></i>
        <div class="header"></div>
        <p></p>
    </div>
    
    @if (Model.Any())
    {
        <table id="ReportsTableAdmin" class="ui sortable celled table">
            <thead>
            <tr>
                <th class="">Title</th>
                <th class="sorted descending">Status</th>
                <th class="sorted ascending">Type</th>
                <th class="">Reporter</th>
                <th class="">Actions</th>
            </tr>
            </thead>
            @Html.Partial("_ReportsTableBodyAdmin", Model)
        </table>

        @Html.PagedListPager(Model, page => Url.Action("All", new { page }))

    }
    else
    {

    }
    
</div>

<div class="ui modal">
    <i class="close icon"></i>
    <div class="header">
        Edit Report
    </div>
    <div class="ui form content">
        <input type="hidden" id="Id" />
        <input type="hidden" id="ReporterId" />
        <div class="field">
            <input type="text" id="Title"/>
        </div>
        <div class="field">
            <textarea id="Description"></textarea>
        </div>
        <div class="field">
            <input type="text" id="Title" />
        </div>
        <div class="field">
            <select id="Type"></select>
        </div>
        <div class="field">
            <select id="Category"></select>
        </div>
        <div class="field">
            <select id="Status"></select>
        </div>
    </div>
    <div class="actions">
        <div class="ui black deny button">
            Cancel
        </div>
        <div id="btnSave" class="ui positive right labeled icon button">
            Save changes
            <i class="checkmark icon"></i>
        </div>
    </div>
</div>
                
@section Scripts{
    <script>
        $('.ui.sticky').sticky();

        $(document).ready(function($) {
            $('table').tablesort();
        });

        function getDetailBook(id) {
            $("#title").text("Details");
            $.ajax({
                url: '/Administration/reports/details/' + id,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    $("#Id").val(data.Id);
                    $("#ReporterId").val(data.ReporterId);
                    $("#Title").val(data.Title);
                    $("#Description").val(data.Description);
                    $("#Type").val(data.Type);
                    $("#Status").val(data.Status);

                    var $categories = $("#Category");
                    $categories.empty();

                    for (i = 0; i < data.Categories.length; i++) {
                        $categories.append($("<option></option>").attr("value", data.Categories[i].Value).text(data.Categories[i].Text));
                    }
                    $categories.val(data.SelectedCategoryId);
                    $('.ui.modal').modal('show');
                },
                error: function (err) {
                    //TODO Add the error to message
                    alert("Error: " + err.responseText);
                }
            });
        }

        // Update Report
        $("#btnSave").click(function (e) {

            var data = {
                Id: $("#Id").val(),
                ReporterId: $("#ReporterId").val(),
                Title: $("#Title").val(),
                Description: $("#Description").val(),
                Type: $("#Type").val(),
                Status: $("#Status").val(),
                SelectedCategoryId: $("#Category").val()
            }
            $.ajax({
                url: '/Administration/Reports/Update/',
                type: 'POST',
                dataType: 'json',
                data: data,
                success: function(data) {
                    $(".ui.modal").modal('hide');
                    $(".ui.message").addClass('positive');
                    $(".ui.message .header").text('Succesfully saved!');
                    $(".ui.message.hide").show(1000);
                    clear();
                },
                error: function(err) {
                    alert("Error: " + err.responseText);
                }
            });
        });

        //Delete report
        function deleteReport(id) {
            var confirmDelete = confirm("Do you want to delete this book ?");
            if (confirmDelete) {
                $.ajax({
                    url: "/Administration/reports/delete/" + id,
                    type: "POST",
                    dataType: 'json',
                    success: function (data) {
                        $(".ui.message").addClass('positive');
                        $(".ui.message .header").text('Succesfully deleted!');
                        $(".ui.message.hide").show(1000);
                    },
                    error: function (err) {
                        alert("Error: " + err.responseText);
                    }
                });
            }
        }

        window.addEventListener("popstate", function (e) {
            $.ajax({
                url: location.href,
                success: function (result) {
                    $('#ReportsTableAdmin').html(result);
                }
            });
        });

        function ChangeUrl(page, url) {
            if (typeof (history.pushState) != "undefined") {
                var obj = { Page: page, Url: url };
                history.pushState(null, obj.Page, obj.Url);
            } else {
                alert("Browser does not support HTML5.");
            }
        }

        function getUrlVars() {
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
            }
            return vars;
        }

        // Ajax Pagination call
        $(function () {
            $('body').on('click', '#ReportsTableAdmin .pagination a', function (event) {
                event.preventDefault();
                console.log('page');
                //var searchString = $('#SearchString').val();
                //if (searchString == undefined || searchString == '') {
                //    searchString = '';
                //} else {
                //    searchString = '&searchString=' + searchString;
                //}
                var url = $(this).attr('href');
                console.log(url);
                $.ajax({
                    url: url,
                    success: function (result) {
                        ChangeUrl('index', url);
                        $('#ReportsTableAdmin').html(result);
                    }
                });
            });
        });



        /*
	        A simple, lightweight jQuery plugin for creating sortable tables.
	        https://github.com/kylefox/jquery-tablesort
	        Version 0.0.11
        */

        (function ($) {
            $.tablesort = function ($table, settings) {
                var self = this;
                this.$table = $table;
                this.$thead = this.$table.find('thead');
                this.settings = $.extend({}, $.tablesort.defaults, settings);
                this.$sortCells = this.$thead.length > 0 ? this.$thead.find('th:not(.no-sort)') : this.$table.find('th:not(.no-sort)');
                this.$sortCells.on('click.tablesort', function () {
                    self.sort($(this));
                });
                this.index = null;
                this.$th = null;
                this.direction = null;
            };

            $.tablesort.prototype = {

                sort: function (th, direction) {
                    var start = new Date(),
                        self = this,
                        table = this.$table,
                        rowsContainer = table.find('tbody').length > 0 ? table.find('tbody') : table,
                        rows = rowsContainer.find('tr').has('td, th'),
                        cells = rows.find(':nth-child(' + (th.index() + 1) + ')').filter('td, th'),
                        sortBy = th.data().sortBy,
                        sortedMap = [];

                    var unsortedValues = cells.map(function (idx, cell) {
                        if (sortBy)
                            return (typeof sortBy === 'function') ? sortBy($(th), $(cell), self) : sortBy;
                        return ($(this).data().sortValue != null ? $(this).data().sortValue : $(this).text());
                    });
                    if (unsortedValues.length === 0) return;

                    //click on a different column
                    if (this.index !== th.index()) {
                        this.direction = 'asc';
                        this.index = th.index();
                    }
                    else if (direction !== 'asc' && direction !== 'desc')
                        this.direction = this.direction === 'asc' ? 'desc' : 'asc';
                    else
                        this.direction = direction;

                    direction = this.direction == 'asc' ? 1 : -1;

                    self.$table.trigger('tablesort:start', [self]);
                    self.log("Sorting by " + this.index + ' ' + this.direction);

                    // Try to force a browser redraw
                    self.$table.css("display");
                    // Run sorting asynchronously on a timeout to force browser redraw after
                    // `tablesort:start` callback. Also avoids locking up the browser too much.
                    setTimeout(function () {
                        self.$sortCells.removeClass(self.settings.asc + ' ' + self.settings.desc);
                        for (var i = 0, length = unsortedValues.length; i < length; i++) {
                            sortedMap.push({
                                index: i,
                                cell: cells[i],
                                row: rows[i],
                                value: unsortedValues[i]
                            });
                        }

                        sortedMap.sort(function (a, b) {
                            return self.settings.compare(a.value, b.value) * direction;
                        });

                        $.each(sortedMap, function (i, entry) {
                            rowsContainer.append(entry.row);
                        });

                        th.addClass(self.settings[self.direction]);

                        self.log('Sort finished in ' + ((new Date()).getTime() - start.getTime()) + 'ms');
                        self.$table.trigger('tablesort:complete', [self]);
                        //Try to force a browser redraw
                        self.$table.css("display");
                    }, unsortedValues.length > 2000 ? 200 : 10);
                },

                log: function (msg) {
                    if (($.tablesort.DEBUG || this.settings.debug) && console && console.log) {
                        console.log('[tablesort] ' + msg);
                    }
                },

                destroy: function () {
                    this.$sortCells.off('click.tablesort');
                    this.$table.data('tablesort', null);
                    return null;
                }

            };

            $.tablesort.DEBUG = false;

            $.tablesort.defaults = {
                debug: $.tablesort.DEBUG,
                asc: 'sorted ascending',
                desc: 'sorted descending',
                compare: function (a, b) {
                    if (a > b) {
                        return 1;
                    } else if (a < b) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            };

            $.fn.tablesort = function (settings) {
                var table, sortable, previous;
                return this.each(function () {
                    table = $(this);
                    previous = table.data('tablesort');
                    if (previous) {
                        previous.destroy();
                    }
                    table.data('tablesort', new $.tablesort(table, settings));
                });
            };

        })(window.Zepto || window.jQuery);


    </script>
}